---
import BaseLayout from '../../layouts/BaseLayout.astro'
import FormattedDate from '../../components/FormattedDate.astro'
import TablaDeContenidos from '../../components/TableOfContents.astro'

import postsData from '../../../public/posts.json'

export async function getStaticPaths() {
  return postsData.docs.map((post) => ({
    params: { slug: post.slug },
    props: { slug: post.slug },
  }))
}

const { slug } = Astro.props;

import postsJson from '../../../public/posts.json'

const detailPost = postsJson.docs.find((post) => post.slug === slug);
const date = detailPost ? new Date(detailPost.publishedAt) : null;

function extractHeadings(nodes: any[]): { depth: number; text: string; slug: string }[] {
  const headings: { depth: number; text: string; slug: string }[] = [];

  for (const node of nodes) {
    if (node.type === "heading") {
      const text = node.children.map((c: any) => c.text).join("");
      const slug = text
        .toLowerCase()
        .replace(/[^\w]+/g, "-")
        .replace(/(^-|-$)/g, "");
      headings.push({ depth: node.level || 2, text, slug });
    }
    if (node.children) {
      headings.push(...extractHeadings(node.children));
    }
  }

  return headings;
}

const headings = detailPost ? extractHeadings(detailPost.content.root.children) : [];
---
<BaseLayout>
  <main class="app-container pt-36">
	{detailPost ? (
		<div class="flex gap-8">
			<div class="flex-1">
				<h1 class="text-6xl font-bold mb-4">{detailPost.title}</h1>
				{date && (
				<p class="opacity-70 mb-6">
					<FormattedDate date={date} />
				</p>
				)}
				{detailPost.heroImage?.url && (
				<img
					src={detailPost.heroImage.url}
					alt={detailPost.title}
					class="rounded-xl mb-8 max-h-[500px] object-cover"
				/>
				)}
				<article class="prose prose-lg dark:prose-invert">
				{detailPost.content.root.children.map((node, index) => {
					switch (node.type) {
					case "paragraph":
						return <p>{node.children.map((c: any) => c.text).join('')}</p>;
					case "heading":
						const text = node.children.map((c: any) => c.text).join('');
						const slug = text.toLowerCase().replace(/[^\w]+/g, '-').replace(/(^-|-$)/g, '');
						return <h2 id={slug}>{text}</h2>;
					default:
						return null;
					}
				})}
				</article>
			</div>

			<aside class="hidden lg:block w-64 sticky top-36 self-start">
				{headings.length > 0 && <TablaDeContenidos headings={headings} />}
			</aside>
		</div>
	) : (
		<p class="text-red-600">Post not found.</p>
	)}
	</main>
</BaseLayout>
